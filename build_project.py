import os
import json

CONFIG = {
    "source": "source",
    "output": "build/build.lua",
    "base_url": "https://raw.githubusercontent.com/Nanskip/NaN-GDK/main/",
}

MODULES_DIR = "modules"
ASSET_TYPES = {
    "models": "models",
    "textures": "textures",
    "sounds": "sounds",
    "data": "data",
    "other": "other"
}

def collect_files():
    modules = {}
    assets = {k: {} for k in ASSET_TYPES}
    main_code = ""

    for root, _, files in os.walk(CONFIG["source"]):
        for file in files:
            full_path = os.path.join(root, file)
            rel_path = os.path.relpath(full_path, CONFIG["source"]).replace("\\", "/")
            url = CONFIG["base_url"] + rel_path
            name, ext = os.path.splitext(os.path.basename(file))
            folder = rel_path.split("/")[0]

            if folder == MODULES_DIR and ext == ".lua":
                modules[name] = name  # require("name")
            elif ext == ".lua" and file == "main.lua":
                with open(full_path, encoding="utf-8") as f:
                    main_code = f.read()
            elif folder in assets:
                assets[folder][name] = url

    return modules, assets, main_code

def generate_build(modules, assets, main_code):
    out = []

    out.append('-- build.lua autogenerated\n_DEBUG = true\n')

    # Modules
    out.append("Modules = {")
    for k, v in modules.items():
        out.append(f'    {k} = "{v}",')
    out.append("}\n")

    # Asset tables
    for group in assets:
        out.append(f"{group} = {{}}\n")

    # Counters
    out.append("local to_load, loaded = 0, 0\n")
    out.append("function _log(msg) if _DEBUG then print(msg) end end\n")
    out.append("function _check_ready() if loaded >= to_load then _log('All assets loaded') _START_GAME() end end\n")

    # Download code
    for group, items in assets.items():
        for key, url in items.items():
            out.append(f'''
to_load += 1
_log("Downloading {group}/{key}")
HTTP:Get("{url}", function(res)
    if res.StatusCode == 200 then
        {group}.{key} = res.Body
        _log("Downloaded {group}/{key}")
    else
        _log("Failed to download {group}/{key}: " .. res.StatusCode)
    end
    loaded += 1
    _check_ready()
end)
''')

    # Require modules
    out.append("-- Load modules\n")
    for mod in modules:
        out.append(f'require("{mod}")')

    # Add main code inside _START_GAME
    out.append("\nfunction _START_GAME()")
    out.append(main_code.strip())
    out.append("end")

    return "\n".join(out)

def main():
    modules, assets, main_code = collect_files()
    result = generate_build(modules, assets, main_code)

    os.makedirs(os.path.dirname(CONFIG["output"]), exist_ok=True)
    with open(CONFIG["output"], "w", encoding="utf-8") as f:
        f.write(result)

    print(f"âœ… Build complete: {CONFIG['output']}")

if __name__ == "__main__":
    main()
