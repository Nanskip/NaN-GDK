import os
import re

# Transform main code
def transform_main_code(code):
    replacements = {
        r'\bModules\.([a-zA-Z_][a-zA-Z0-9_]*)': r'modules.\1',
        r'\bModels\.([a-zA-Z_][a-zA-Z0-9_]*)': r'models.\1',
        r'\bTextures\.([a-zA-Z_][a-zA-Z0-9_]*)': r'textures.\1',
        r'\bSounds\.([a-zA-Z_][a-zA-Z0-9_]*)': r'sounds.\1',
        r'\bData\.([a-zA-Z_][a-zA-Z0-9_]*)': r'data.\1',
    }
    for pattern, repl in replacements.items():
        code = re.sub(pattern, repl, code)
    return code

# Unpack module code
def unpack_lua_module(code):
    code = code.strip()
    # Remove `local name = {}`
    code = re.sub(r'^local\s+(\w+)\s*=\s*{}\s*', r'\1 = {}', code, flags=re.MULTILINE)
    # Remove `return name`
    code = re.sub(r'\breturn\s+\w+\s*$', '', code, flags=re.MULTILINE)
    return code.strip()

# Generate build file
def generate_build(modules, assets, main_code, github_base_url, module_sources):
    out = []

    out.append("-- build.lua autogenerated")
    out.append("_debug = true\n")

    for group in assets:
        out.append(f"{group} = {{}}\n")

    out.append("local to_load, loaded = 0, 0\n")
    out.append("function _log(msg) if _debug then print(msg) end end")
    out.append("function _check_ready() if loaded >= to_load then _log('All assets loaded') _start_game() end end\n")

    # Load 3D models
    for key, filename in assets["models"].items():
        url = f"{github_base_url}/source/models/{filename}"
        out.append(f"""to_load += 1
_log("Downloading models/{key}")
HTTP:Get("{url}", function(res)
    if res.StatusCode == 200 then
        Assets:Load(res.Body, function(assets)
            if assets == nil then
                _log("Failed to load model {key}")
                loaded += 1
                _check_ready()
                return
            end
            for _, asset in ipairs(assets) do
                asset:SetParent(World)
                models.{key} = asset
                _log("Downloaded and loaded model {key}")
            end
            loaded += 1
            _check_ready()
        end, AssetType.AnyObject)
    else
        _log("Failed to download models/{key}: " .. res.StatusCode)
        loaded += 1
        _check_ready()
    end
end)\n""")

    # Load other assets
    for group in ["textures", "data", "sounds"]:
        for key, filename in assets[group].items():
            url = f"{github_base_url}/source/{group}/{filename}"
            out.append(f"""to_load += 1
_log("Downloading {group}/{key}")
HTTP:Get("{url}", function(res)
    if res.StatusCode == 200 then
        {group}.{key} = res.Body
        _log("Downloaded {group}/{key}")
    else
        _log("Failed to download {group}/{key}: " .. res.StatusCode)
    end
    loaded += 1
    _check_ready()
end)\n""")

    # Add modules
    out.append("-- modules\n")
    for mod_name, mod_code in module_sources.items():
        unpacked = unpack_lua_module(mod_code)
        out.append(unpacked + "\n")

    # Add start function
    out.append("-- start\n")
    out.append("function _start_game()")
    out.append("    worldgen.test()")
    out.append("end\n")
    
    return "\n".join(out)

# Build project
def build_project(source_dir, output_file, github_base_url):
    assets = {"models": {}, "textures": {}, "data": {}, "sounds": {}}
    module_sources = {}
    main_code = ""

    for root, dirs, files in os.walk(source_dir):
        for file in files:
            file_path = os.path.join(root, file)
            rel_path = os.path.relpath(file_path, source_dir)

            if file == "main.lua":
                with open(file_path, 'r', encoding='utf-8') as f:
                    main_code = f.read()
            elif file.endswith(".lua") and "modules" in root:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                mod_name = file.replace(".lua", "")
                module_sources[mod_name] = content
            elif file.endswith(".json"):
                with open(file_path, 'r', encoding='utf-8') as f:
                    f.read()  # Check if file is readable
                assets["data"][file.replace(".json", "")] = file
            elif file.endswith(".glb"):
                assets["models"][file.replace(".glb", "")] = file
            elif file.endswith(".png") or file.endswith(".jpg"):
                assets["textures"][file.rsplit('.', 1)[0]] = file
            elif file.endswith(".mp3"):
                assets["sounds"][file.replace(".mp3", "")] = file

    build_code = generate_build({}, assets, main_code, github_base_url, module_sources)
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(build_code)
    return output_file

# Test parameters
source_directory = "source"
output_file = "build/build.lua"
github_base_url = "https://raw.githubusercontent.com/Nanskip/NaN-GDK/refs/heads/main"

build_project(source_directory, output_file, github_base_url)
