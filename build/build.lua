-- build.lua autogenerated
_debug = true

models = {}

textures = {}

data = {}

sounds = {}

local to_load, loaded = 0, 0

function _log(msg) if _debug then print(msg) end end
function _check_ready() if loaded >= to_load then _log('All assets loaded') _start_game() end end

to_load += 1
_log("Downloading models/soda_can")
HTTP:Get("https://raw.githubusercontent.com/Nanskip/NaN-GDK/refs/heads/main/source/models/soda_can.glb", function(res)
    if res.StatusCode == 200 then
        Assets:Load(res.Body, function(assets)
            if assets == nil then
                _log("Failed to load model soda_can")
                loaded += 1
                _check_ready()
                return
            end
            for _, asset in ipairs(assets) do
                asset:SetParent(World)
                models.soda_can = asset
                _log("Downloaded and loaded model soda_can")
            end
            loaded += 1
            _check_ready()
        end, AssetType.AnyObject)
    else
        _log("Failed to download models/soda_can: " .. res.StatusCode)
        loaded += 1
        _check_ready()
    end
end)

to_load += 1
_log("Downloading textures/can")
HTTP:Get("https://raw.githubusercontent.com/Nanskip/NaN-GDK/refs/heads/main/source/textures/can.png", function(res)
    if res.StatusCode == 200 then
        textures.can = res.Body
        _log("Downloaded textures/can")
    else
        _log("Failed to download textures/can: " .. res.StatusCode)
    end
    loaded += 1
    _check_ready()
end)

to_load += 1
_log("Downloading data/test")
HTTP:Get("https://raw.githubusercontent.com/Nanskip/NaN-GDK/refs/heads/main/source/data/test.json", function(res)
    if res.StatusCode == 200 then
        data.test = res.Body
        _log("Downloaded data/test")
    else
        _log("Failed to download data/test: " .. res.StatusCode)
    end
    loaded += 1
    _check_ready()
end)

-- modules

loading = {}loading.ui = require("uikit")

loading.start = function(self)
    local ui = self.ui

    self.background = ui:frame({color = Color(0, 0, 0, 0)})
end

loading.finish = function(self)
    self.background:remove()
end

worldgen = {}worldgen.test = function()
    print("hey!")
end

-- start

function _start_game()
    worldgen.test()
    
    loading_screen:finish()
end
